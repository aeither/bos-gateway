let greeting = `Have a great day ${props.name}.`;
const decimals = 18;

function formatHex0(value, tokenDecimals) {
  const formattedValue = Big(value.toString())
    .div(Big(10).pow(tokenDecimals))
    .toFixed(0)
    .replace(/\d(?=(\d{3})+\.)/g, "$&,");

  return formattedValue;
}

function formatHex(value, tokenDecimals) {
  const formattedValue = Big(value.toString())
    .div(Big(10).pow(tokenDecimals))
    .toFixed(6)
    .replace(/\d(?=(\d{3})+\.)/g, "$&,");

  return formattedValue;
}

State.init({
  img: null,
  strEther: 0,
  gasPrice: 0,
  //   balance: 0.0,
  // sender: "",
});

// Force user to connect to Base to show UI
if (
  state.chainId === undefined &&
  ethers !== undefined &&
  Ethers.send("eth_requestAccounts", [])[0]
) {
  Ethers.provider()
    .getNetwork()
    .then((chainIdData) => {
      if (chainIdData?.chainId) {
        State.update({ chainId: chainIdData.chainId });
      }
    });
}
// if (state.chainId !== undefined && state.chainId !== 1) {
//   return <p>Switch to Base Mainnet</p>;
// }
if (state.chainId !== undefined && state.chainId !== 8453) {
  return <p>Switch to Base Mainnet</p>;
}

// FETCH ABI

const contractAddress = "0xCF205808Ed36593aa40a44F10c7f7C2F67d4A4d4";
const tokenDecimals = 18;

const contractAbi = fetch(
  "https://raw.githubusercontent.com/aeither/bos-gateway/main/abi/FriendtechSharesV1.json"
);
if (!contractAbi.ok) {
  return "Loading";
}

const iface = new ethers.utils.Interface(contractAbi.body);

// HELPER FUNCTIONS

function getGasPrice() {
  return Ethers.provider().getGasPrice();
}

const getBuyPrice = (receiver) => {
  const encodedData = iface.encodeFunctionData("getBuyPrice", [receiver, 1]);

  return Ethers.provider()
    .call({
      to: contractAddress,
      data: encodedData,
    })
    .then((rawBalance) => {
      const receiverBalanceHex = iface.decodeFunctionResult(
        "getBuyPrice",
        rawBalance
      );

      return Big(receiverBalanceHex.toString())
        .div(Big(10).pow(tokenDecimals))
        .toFixed(2)
        .replace(/\d(?=(\d{3})+\.)/g, "$&,");
    });
};

function batchBalanceOf(chainId, userAddress, tokenAddresses, abi) {
  const balanceProvider = new ethers.Contract(
    config.balanceProviderAddress,
    abi.body,
    Ethers.provider().getSigner()
  );

  return balanceProvider.batchBalanceOf([userAddress], tokenAddresses);
}

const submitEthers = (strEther, _referral) => {
  if (!strEther) {
    return console.log("Amount is missing");
  }

  const erc20 = new ethers.Contract(
    contractAddress,
    contractAbi.body,
    Ethers.provider().getSigner()
  );
  console.log("erc20", erc20);

  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();
  console.log("amount", amount);

  erc20.submit(contractAddress, { value: amount }).then((transactionHash) => {
    console.log("transactionHash is " + transactionHash);
  });
};

// DETECT SENDER

if (state.sender === undefined) {
  const accounts = Ethers.send("eth_requestAccounts", []);
  if (accounts.length) {
    State.update({ sender: accounts[0] });
    console.log("set sender", accounts[0]);
  }
}

//if (!state.sender)  return "Please login first";

// FETCH SENDER BALANCE

if (state.balance === undefined && state.sender) {
  Ethers.provider()
    .getBalance(state.sender)
    .then((balance) => {
      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });
    });
}

// FETCH SENDER STETH BALANCE

if (state.stakedBalance === undefined && state.sender) {
  getBuyPrice(state.sender).then((stakedBalance) => {
    console.log("stakedBalance", stakedBalance);
    State.update({ stakedBalance });
  });
}

// OUTPUT UI

const getSender = () => {
  return !state.sender
    ? ""
    : state.sender.substring(0, 6) +
        "..." +
        state.sender.substring(state.sender.length - 4, state.sender.length);
};

return (
  <>
    <div class="sticky-top bg-white text-dark border-bottom">
      <div class="container px-0 py-2">
        <div class="row justify-content-between">
          <div class="col">
            <h2>
              <span class="text-info">friend.</span>tech
            </h2>
          </div>
          <div class="col">
            <div class="row justify-content-between">
              <Web3Connect connectLabel="Connect" />
            </div>
          </div>
        </div>
      </div>
    </div>

    {!!state.sender && (
      <div class="container centered-text">
        <div class="row">
          <div class="col">
            <div class="border rounded py-2 my-2 text-center">
              ‚¨® {state.balance} ETH - {getSender()}
            </div>
          </div>
        </div>
      </div>
    )}

    <div class="container centered-text">
      <h4>Highlights</h4>
      <div class="row">
        <div class="col m-2">Herro - 0x5479...0311</div>
        <div class="col">
          <button
            onClick={() => {
              clipboard.writeText("0x5479f127a4d594208549c86f4b4903a1175a0311");
            }}
          >
            Copy
          </button>
        </div>
      </div>
      <div class="row">
        <div class="col m-2">Cobie - 0x4e5f...676e1</div>
        <div class="col">
          <button
            onClick={() => {
              clipboard.writeText("0x4e5f7e4a774bd30b9bdca7eb84ce3681a71676e1");
            }}
          >
            Copy
          </button>
        </div>
      </div>
      <div class="row">
        <div class="col m-2">Machi BB - 0xf0ea...df3d</div>
        <div class="col">
          <button
            onClick={() => {
              clipboard.writeText("0xf0ea13334d6f74044ec7332de1c6ec194179df3d");
            }}
          >
            Copy
          </button>
        </div>
      </div>
    </div>

    <div class="container centered-text mt-4">
      <h4>Explore</h4>
      <div class="row">
        <div class="col py-2">
          <input
            disabled={!state.sender}
            value={state.targetAddress}
            onChange={(e) => State.update({ targetAddress: e.target.value })}
            placeholder="Address"
          />
          <button
            onClick={() => {
              const friendTechContract = new ethers.Contract(
                contractAddress,
                contractAbi.body,
                Ethers.provider().getSigner()
              );

              // Total supply
              friendTechContract
                .sharesSupply(state.targetAddress)
                .then((data) => {
                  console.log(formatHex(data, 0));
                  State.update({ sharesSupply: formatHex0(data, 0) });
                });

              // Get Sell Price
              friendTechContract
                .getSellPrice(state.targetAddress, 1)
                .then((data) => {
                  console.log(formatHex(data, decimals));
                  State.update({ sellPrice: formatHex(data, decimals) });
                });

              // Get Sell Price After Fee
              friendTechContract
                .getSellPriceAfterFee(state.targetAddress, 1)
                .then((data) => {
                  console.log(formatHex(data, decimals));
                  State.update({
                    sellPriceAfterFee: formatHex(data, decimals),
                  });
                });

              // Get Buy Price
              friendTechContract
                .getBuyPrice(state.targetAddress, 1)
                .then((data) => {
                  console.log(formatHex(data, decimals));
                  State.update({ buyPrice: formatHex(data, decimals) });
                });

              // Get Buy Price After Fee
              friendTechContract
                .getBuyPriceAfterFee(state.targetAddress, 1)
                .then((data) => {
                  console.log(formatHex(data, decimals));
                  State.update({ buyPriceAfterFee: formatHex(data, decimals) });
                });

              // Get target user balance
              Ethers.provider()
                .getBalance(state.targetAddress)
                .then((balance) => {
                  console.log("balance", formatHex(balance, decimals));
                  State.update({ targetBalance: formatHex(balance, decimals) });
                });
            }}
          >
            üîç Search
          </button>
        </div>
      </div>
    </div>

    {state.targetAddress && state.sharesSupply && (
      <>
        <div class="container centered-text">
          <div class="row ">
            <div class="col ">
              <div class="border rounded py-2 my-2">
                <div class="px-2">Supply: {state.sharesSupply}</div>
                <div class="px-2">Buy Price: {state.buyPrice}</div>
                <div class="px-2">
                  Buy Price (including fees): {state.buyPriceAfterFee}{" "}
                </div>
                <div class="px-2">Sell Price: {state.sellPrice}</div>
                <div class="px-2">
                  Sell Price (including fees): {state.sellPriceAfterFee}
                </div>
                <div class="px-2">Address Balance: {state.targetBalance}</div>
              </div>
            </div>
          </div>
        </div>

        <div class="container centered-text">
          <div class="row">
            <div class="col">
              <div class="d-grid gap-2 d-md-block">
                <button
                  onClick={() => {
                    const friendTechContract = new ethers.Contract(
                      contractAddress,
                      contractAbi.body,
                      Ethers.provider().getSigner()
                    );

                    // Buy Shares
                    friendTechContract
                      .buyShares(
                        "0x5052936d3c98d2d045da4995d37b0dae80c6f07f",
                        1,
                        {
                          value: ethers.utils.parseEther("0.0"),
                        }
                      )
                      .then((data) => {
                        console.log(data);
                      });

                    // friendTechContract
                    //   .buyShares("targetAddress", 1, {
                    //     value: ethers.utils.parseEther("0"),
                    //   })
                    //   .then((data) => {
                    //     console.log(data);
                    //   });
                  }}
                >
                  Buy
                </button>
              </div>
            </div>
            <div class="col">
              <div class="d-grid gap-2 d-md-block">
                <button class="btn btn-danger" onClick={() => {}}>
                  Sell
                </button>
              </div>
            </div>
          </div>
        </div>
      </>
    )}

    <>
      <button onClick={() => submitEthers(state.strEther, state.sender)}>
        Submit
      </button>
      <button
        onClick={() => {
          const friendTechContract = new ethers.Contract(
            contractAddress,
            contractAbi.body,
            Ethers.provider().getSigner()
          );

          // Shares Balance
          friendTechContract
            .sharesBalance(
              "0x9ea166c321fd4123789d372e51eb4da80d0e6eb4",
              "0xbc1d9bcd289f5e2fd43cc32ed8e39ddd9feaa912"
            )
            .then((data) => {
              console.log(formatHex(data, 0));
            });

          // Sell Shares
          // friendTechContract
          //   .sellShares("0x5052936d3c98d2d045da4995d37b0dae80c6f07f", 1, {
          //     value: ethers.utils.parseEther("0.0"),
          //   })
          //   .then((data) => {
          //     console.log(data);
          //   });

          // Buy Shares
          friendTechContract
            .buyShares("0x5052936d3c98d2d045da4995d37b0dae80c6f07f", 1, {
              value: ethers.utils.parseEther("0.0"),
            })
            .then((data) => {
              console.log(data);
            });

          // friendTechContract
          //   .buyShares("0x123", 1, {
          //     value: ethers.utils.parseEther("0.01"),
          //   })
          //   .then((data) => {
          //     console.log(data);
          //   });

          // friendTechContract.batchBalanceOf([userAddress], tokenAddresses);
        }}
      >
        Function 2
      </button>
      <button
        onClick={() => {
          console.log(state.value);
          State.update({ value: "18d18" });
        }}
      >
        test state
      </button>
      <button
        onClick={() => {
          const gasPrice = getGasPrice().then((gasPrice) => {
            const gasLimit = "210000";
            const gp = Big(gasPrice.toString())
              .mul(gasLimit)
              .div(Big(10).pow(decimals))
              .toFixed(6)
              .toString();
            State.update({ gasPrice: gp });

            console.log("gasPrice", gp);

            return Big(gasPrice.toString())
              .mul(gasLimit)
              .div(Big(10).pow(decimals))
              .toFixed(2);
          });
        }}
      >
        getGasPrice
      </button>
      <p>{state.gasPrice}</p>
    </>

    <div class="container border border-info p-3 text-center min-vw-100">
      <h1>Hello</h1>
      <p>Greeting: {greeting} </p>
      <p>Name: {props.name} </p>
      <p>Current accountId: {context.accountId}</p>
      <p>Current network: {context.networkId}</p>
      <button
        onClick={() => {
          console.log("hello world", ethers);
          Ethers.send("eth_requestAccounts", [])[0];
        }}
      >
        click me
      </button>
    </div>
    <div className="container row">
      <div>
        Image upload: <br />
        <IpfsImageUpload image={state.img} />
      </div>
      <div>
        Raw State:
        <pre>{JSON.stringify(state)}</pre>
      </div>
      <div className="mt-2">
        {state.img.cid && (
          <img
            src={`https://ipfs.near.social/ipfs/${state.img.cid}`}
            alt="uploaded"
          />
        )}
      </div>
    </div>
    <div>
      <div>
        <button
          onClick={() => {
            clipboard.writeText("HelloWorld!");
          }}
        >
          Copy "HelloWorld!" to clipboard
        </button>
      </div>
      <textarea className="form-control mt-2" placeholder="Test pasting here" />
    </div>
  </>
);
